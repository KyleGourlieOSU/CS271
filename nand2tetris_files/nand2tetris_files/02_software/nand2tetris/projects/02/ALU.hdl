// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // Produces 16-bit false
   Not16(in=x, out=t);
   And16(a=x, b=t, out=e);

   // zero for x and y switch
   Mux16(a=x, b=e, sel=zx, out=zerox);
   Mux16(a=y, b=e, sel=zy, out=zeroy);

   // negation of x and y
   Not16(in=zerox, out=notzerox);
   Not16(in=zeroy, out=notzeroy);

   // gates from zero muxer and negation
   Mux16(a=zerox, b=notzerox, sel=nx, out=notzeroox);
   Mux16(a=zeroy, b=notzeroy, sel=ny, out=notzerooy);
   
   //adding and anding the two inputs
   And16(a=notzeroox, b=notzerooy, out=anded);
   Add16(a=notzeroox, b=notzerooy, out=added);
   
   //switch for the addition and anding
   Mux16(a=anded, b=added, sel=f, out=something);

   //taking the negation of the answer
   Not16(in=something, out=notsomething);
   
   //switch for choosing the negative or not
   Mux16(a=something, b=notsomething, sel=no, out=outc);

   // creates splice for the output
   Not16(in=outc, out=b1);
   Not16(in=b1, out=out2);

   // function that grabs the last bit from a 16 bit
   Lastgrab16(in=out2, out=ng);

   // places the splice into the output
   Not16(in=outc, out=notout);
   Not16(in=notout, out=out);
   
   // splits the negation of the output into 2 8-bit chunks
   Splitter16(in=notout, a=t1, b=t2);
   
   // if all 0, then this will return 1
   And8Way(in=t1, out=s1);
   And8Way(in=t2, out=s2);
   And(a=s1, b=s2, out=zr);
}