// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    //RAM16: 0 - 16383 in decimal
    //RAM16: 0000000000000000 - 0011111111111111 in 2's complement

    //SCREEN: 16384 - 24575 in decimal
    //SCREEN: 0100000000000000 - 0101111111111111 in 2's complement
    
    //KEYBOARD: 24576 - onwards
    //KEYBOARD: 0110000000000000 - 0111111111111111 in 2's complement

    //To see if I need to access memory in RAM16, I don't need to look at the last 2 bits in address: address[0..13]
    //To see if I need to access memory in SCREEN, I don't need to look at the last 3 bits in address: address[0..12]
    
    //From this I can use the excluded bits as a way to split up my options and organize the 3 categories of memory:
    //00-> RAM16K
    //01-> RAM16K
    //10-> SCREEN
    //11-> KEYBOARD 
    //These values are all from address[13..14]. I don't care about address[15] because this tells me if its negative or not.
    //To combine my two buses of RAM16K, an OR gate can be used

    DMux4Way(in=load, sel=address[13..14], a=RAMld1, b=RAMld2, c=SCRld, d=KBDld);
    Or(a=RAMld1, b=RAMld2, out=RAMld);
    RAM16K(in=in, load=RAMld, address=address[0..13], out=RAMout);
    Screen(in=in, load=SCRld, address=address[0..12], out=SCRout);
    Keyboard(out=KBDout);
    Mux4Way16(a=RAMout, b=RAMout, c=SCRout, d=KBDout, sel=address[13..14], out=out);

}